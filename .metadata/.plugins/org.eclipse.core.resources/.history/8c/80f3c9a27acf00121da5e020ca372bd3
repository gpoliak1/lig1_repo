/*  bezcurve.c
 *  This program uses evaluators to draw a Bezier curve.
 */
#include <GL/glut.h>
#include <stdlib.h>

int interpolate(double, double, double, double, double, double, double, double,
		double, double, double, double, double, double);

typedef struct tagVector3D {
	double x, y, z;
} Vector3D;

Vector3D pos[4];

GLfloat ctrlpoints[4][3] = { { 0, 0, 0 }, { 2.0875, 11.7893, 0 }, { -0.2289,
		-5.1492, 0 }, { 3, 0, 0 } };

void init(void) {
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glShadeModel(GL_FLAT);
	glMap1f(GL_MAP1_VERTEX_3, 0.0, 1.0, 3, 4, &ctrlpoints[0][0]);
	glEnable(GL_MAP1_VERTEX_3);
}

void display(void) {
	int i;
	int w = glutGet(GLUT_WINDOW_WIDTH);
	int h = glutGet(GLUT_WINDOW_HEIGHT);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60.0, (GLdouble) (w) / (GLdouble) (h), 0.1, 40.0);
	gluLookAt(2.0, 2.0, 15.0, 2.0, 2.0, 0.0, 0.0, 1.0, 0.0);
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1.0, 1.0, 1.0);
	glBegin(GL_LINE_STRIP);
	for (i = 0; i <= 30; i++)
		glEvalCoord1f((GLfloat) i / 30.0);
	glEnd();
	/* The following code displays the control points as dots. */
	glPointSize(5.0);
	glColor3f(1.0, 1.0, 0.0);
	glBegin(GL_POINTS);
	for (i = 0; i < 4; i++) {
		glVertex3fv(&ctrlpoints[i][0]);
	}
	glColor3f(1.0, 0.0, 0.0);
	glVertex3f(0, 0, 0);
	glEnd();
	glFlush();
}

void reshape(int w, int h) {
	glViewport(0, 0, (GLsizei) w, (GLsizei) h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60.0, (GLfloat) w / (GLfloat) h, 1.0, 20.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

void keyboard(unsigned char key, int x, int y) {
	switch (key) {
	case 27:
		exit(0);
		break;
	}
}

int interpolate(double p0x, double p0y, double p0z, double u, double p1x,
		double p1y, double p1z, double v, double p2x, double p2y, double p2z,
		double p3x, double p3y, double p3z) {
	double a = 0.0, b = 0.0, c = 0.0, d = 0.0, det = 0.0;
	Vector3D q1, q2;

	if ((u <= 0.0) || (u >= 1.0) || (v <= 0.0) || (v >= 1.0) || (u >= v))
		return 0; /* failure */

	a = 3 * (1 - u) * (1 - u) * u;
	b = 3 * (1 - u) * u * u;
	c = 3 * (1 - v) * (1 - v) * v;
	d = 3 * (1 - v) * v * v;
	det = a * d - b * c;
	/* unnecessary, but just in case... */
	if (det == 0.0)
		return 0; /* failure */

	pos[0].x = p0x;
	pos[0].y = p0y;
	pos[0].z = p0z;
	pos[3].x = p3x;
	pos[3].y = p3y;
	pos[3].z = p3z;

	q1.x = p1x - ((1 - u) * (1 - u) * (1 - u) * p0x + u * u * u * p3x);
	q1.y = p1y - ((1 - u) * (1 - u) * (1 - u) * p0y + u * u * u * p3y);
	q1.z = p1z - ((1 - u) * (1 - u) * (1 - u) * p0z + u * u * u * p3z);

	q2.x = p2x - ((1 - v) * (1 - v) * (1 - v) * p0x + v * v * v * p3x);
	q2.y = p2y - ((1 - v) * (1 - v) * (1 - v) * p0y + v * v * v * p3y);
	q2.z = p2z - ((1 - v) * (1 - v) * (1 - v) * p0z + v * v * v * p3z);

	pos[1].x = d * q1.x - b * q2.x;
	pos[1].y = d * q1.y - b * q2.y;
	pos[1].z = d * q1.z - b * q2.z;
	pos[1].x /= det;
	pos[1].y /= det;
	pos[1].z /= det;

	pos[2].x = (-c) * q1.x + a * q2.x;
	pos[2].y = (-c) * q1.y + a * q2.y;
	pos[2].z = (-c) * q1.z + a * q2.z;
	pos[2].x /= det;
	pos[2].y /= det;
	pos[2].z /= det;

	return 1; /* success */
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(750, 750);
	glutInitWindowPosition(100, 100);
	glutCreateWindow(argv[0]);
	init();
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutKeyboardFunc(keyboard);
	glutMainLoop();
	return 0;
}

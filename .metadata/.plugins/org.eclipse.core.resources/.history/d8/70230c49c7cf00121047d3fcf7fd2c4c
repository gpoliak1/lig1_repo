/*  bezsurf.c
 *  This program renders a wireframe Bezier surface,
 *  using two-dimensional evaluators.
 */
#include <stdlib.h>
#include <GL/glut.h>

bool bezSolid = true;

GLfloat ctrlpoints[4][4][3] = { { { 1, 0, 1 }, { 0.65, 1.5, -1 }, { 1.65, 3.0,
		-2 }, { 2.5, 4.5, -8 } }, { { 3, 0, 0 }, { 1.9, 1.5, 0 },
		{ 2.35, 3, 0 }, { 2.6, 4.5, 0 } }, { { 4, 0, 0 }, { 3.35, 1.5, 0 }, { 3,
		3, 0 }, { 4, 4.5, 0 } }, { { 5.5, 0, 0 }, { 4.2, 1.25, -1 }, { 3.2,
		2.51, -2 }, { 5, 3.4, -80 } } };

void initlights(void) {
	GLfloat ambient[] = { 0.2, 0.2, 0.2, 1.0 };
	GLfloat position[] = { 2.0, 2.0, -7.0, 1.0 };
	GLfloat mat_diffuse[] = { 0.6, 0.6, 0.6, 1.0 };
	GLfloat mat_specular[] = { 1.0, 1.0, 1.0, 1.0 };
	GLfloat mat_shininess[] = { 50.0 };

//	glMatrixMode(GL_MODELVIEW);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);

	glLightfv(GL_LIGHT0, GL_AMBIENT, ambient);
	glLightfv(GL_LIGHT0, GL_POSITION, position);

	glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
	glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
}

void display(void) {
	int i, j;

	int w = glutGet(GLUT_WINDOW_WIDTH);
	int h = glutGet(GLUT_WINDOW_HEIGHT);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

//	gluLookAt(2.0, 2.0, -7.0, 4.0, 2.0, 5.0, 0.0, 1.0, 0.0);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60.0, (GLdouble) (w) / (GLdouble) (h), 0.1, 40.0);

	glMatrixMode(GL_MODELVIEW);
	glDisable(GL_LIGHTING);
	glTranslatef(2, 2, -7);
	glColor3f(1.0f, 0.0f, 0.0f); //set cube color
	glutSolidCube(.75);
	glEnable(GL_LIGHTING);

	glPushMatrix();
	if (bezSolid) {
//		glMatrixMode(GL_MODELVIEW);
//		glLoadIdentity();
		//glRotatef(85.0, 1.0, 1.0, 1.0);
		glTranslatef(0, 0, 4);
		glEvalMesh2(GL_FILL, 0, 30, 0, 30);
	} else {

		glColor3f(1.0, 1.0, 1.0);
		glTranslatef(-1.0, 0, 0);
		//glRotatef(85.0, 1.0, 1.0, 1.0);
		for (j = 0; j <= 8; j++) { //9 lines total in each dimension
			glBegin(GL_LINE_STRIP);
			for (i = 0; i <= 30; i++) //growth
				glEvalCoord2f((GLfloat) i / 30.0, (GLfloat) j / 8.0);
			glEnd();
			glBegin(GL_LINE_STRIP);
			for (i = 0; i <= 30; i++) //growth
				glEvalCoord2f((GLfloat) j / 8.0, (GLfloat) i / 30.0);
			glEnd();
		}

	}
	glPopMatrix();

	glFlush();
}

void init(void) {
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glEnable(GL_DEPTH_TEST);
	glMap2f(GL_MAP2_VERTEX_3, 0, 1, 3, 4, 0, 1, 12, 4, &ctrlpoints[0][0][0]);
	glEnable(GL_MAP2_VERTEX_3);

	if (bezSolid) {
		glEnable(GL_AUTO_NORMAL); //
		glMapGrid2f(30, 0.0, 1.0, 30, 0.0, 1.0); //
		initlights(); /* for lighted version only */
	} else {
//		glMapGrid2f(20, 0.0, 1.0, 20, 0.0, 1.0);
		glShadeModel(GL_FLAT); //
	}
}

void reshape(int w, int h) {
	glViewport(0, 0, (GLsizei) w, (GLsizei) h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60.0, (GLfloat) w / (GLfloat) h, 1.0, 20.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

void keyboard(unsigned char key, int x, int y) {
	switch (key) {
	case 27:
		exit(0);
		break;
	}
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(100, 100);
	glutCreateWindow(argv[0]);
	init();
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutKeyboardFunc(keyboard);
	glutMainLoop();
	return 0;
}


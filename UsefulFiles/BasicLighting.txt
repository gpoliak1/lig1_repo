#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <GL/glut.h>

#include <glm/glm.hpp>
#include <vector>
#include <fstream>
#include <sstream>


void init(void)
{
	//LIGHT0
	GLfloat mat_specular[] = {1.0,1.0,1.0,1.0};
	GLfloat mat_shininess[] = {50.0};
	GLfloat light_position[] = {1.0, 1.0, 1.0, 0.0};
	GLfloat white_light[] = {0.0, 1.0, 1.0, 1.0};
	GLfloat lmodel_ambient[] = {0.1, 0.1, 0.1, 1.0};
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glShadeModel(GL_SMOOTH);
	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
	glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);

	glLightfv(GL_LIGHT0, GL_POSITION, light_position);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, white_light);
	glLightfv(GL_LIGHT0, GL_SPECULAR, white_light);
	//glLightModelfv(GL_LIGHT_MODEL_LOCAL_VIEWER, GL_FALSE);

	//LIGHT1
	GLfloat mat_specular1[] = {1.0,1.0,1.0,1.0};
	GLfloat mat_shininess1[] = {50.0};
	GLfloat light_position1[] = {-1.0, 1.0, 1.0, 0.0};
	GLfloat white_light1[] = {1.0, 1.0, 0.0, 1.0};
	GLfloat lmodel_ambient1[] = {0.1, 0.1, 0.1, 1.0};
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glShadeModel(GL_SMOOTH);
	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular1);
	glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess1);

	glLightfv(GL_LIGHT1, GL_POSITION, light_position1);
	glLightfv(GL_LIGHT1, GL_DIFFUSE, white_light1);
	glLightfv(GL_LIGHT1, GL_SPECULAR, white_light1);
	//glLightModelfv(GL_LIGHT_MODEL_LOCAL_VIEWER, GL_FALSE);

		//LIGHT2
	GLfloat mat_specular2[] = {1.0,1.0,1.0,1.0};
	GLfloat mat_shininess2[] = {50.0};
	GLfloat light_position2[] = {1.0, -1.0, 1.0, 0.0};
	GLfloat white_light2[] = {1.0, 0.0, 1.0, 1.0};
	GLfloat lmodel_ambient2[] = {0.1, 0.1, 0.1, 1.0};
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glShadeModel(GL_SMOOTH);
	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular2);
	glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess2);

	glLightfv(GL_LIGHT2, GL_POSITION, light_position2);
	glLightfv(GL_LIGHT2, GL_DIFFUSE, white_light2);
	glLightfv(GL_LIGHT2, GL_SPECULAR, white_light2);
	//glLightModelfv(GL_LIGHT_MODEL_LOCAL_VIEWER, GL_FALSE);

	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0); //if didnt exist - black, if exists but undefined, default - white
	glEnable(GL_LIGHT1);
	glEnable(GL_LIGHT2);
	glEnable(GL_DEPTH_TEST);
}

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glutSolidSphere(1.0, 20, 16);
	glFlush();
}

void reshape(int w, int h)
{
	glViewport(0, 0, (GLsizei) w, (GLsizei) h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if (w <= h) {
		glOrtho(-1.5, 1.5, -1.5*(GLfloat)h/(GLfloat)w, 1.5*(GLfloat)w/(GLfloat)h, -10.0, 10.0);
	} else {
		glOrtho(-1.5*(GLfloat)h/(GLfloat)w, 1.5*(GLfloat)w/(GLfloat)h, -1.5, 1.5, -10.0, 10.0);
	}
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(500, 500);
	glutCreateWindow(argv[0]);
	init();
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutMainLoop();
	return 0;
}